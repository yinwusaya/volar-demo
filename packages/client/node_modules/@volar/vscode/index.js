"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.currentLabsVersion = exports.middleware = exports.getTsdk = exports.activateTsVersionStatusItem = exports.activateTsConfigStatusItem = exports.activateReloadProjects = exports.activateFindFileReferences = exports.activateWriteVirtualFiles = exports.activateDocumentDropEdit = exports.activateAutoInsertion = void 0;
exports.parseServerCommand = parseServerCommand;
exports.createLabsInfo = createLabsInfo;
const vscode = require("vscode");
var autoInsertion_1 = require("./lib/features/autoInsertion");
Object.defineProperty(exports, "activateAutoInsertion", { enumerable: true, get: function () { return autoInsertion_1.activate; } });
var documentDropEdits_1 = require("./lib/features/documentDropEdits");
Object.defineProperty(exports, "activateDocumentDropEdit", { enumerable: true, get: function () { return documentDropEdits_1.activate; } });
var writeVirtualFiles_1 = require("./lib/features/writeVirtualFiles");
Object.defineProperty(exports, "activateWriteVirtualFiles", { enumerable: true, get: function () { return writeVirtualFiles_1.activate; } });
var fileReferences_1 = require("./lib/features/fileReferences");
Object.defineProperty(exports, "activateFindFileReferences", { enumerable: true, get: function () { return fileReferences_1.activate; } });
var reloadProject_1 = require("./lib/features/reloadProject");
Object.defineProperty(exports, "activateReloadProjects", { enumerable: true, get: function () { return reloadProject_1.activate; } });
var tsconfig_1 = require("./lib/features/tsconfig");
Object.defineProperty(exports, "activateTsConfigStatusItem", { enumerable: true, get: function () { return tsconfig_1.activate; } });
var tsVersion_1 = require("./lib/features/tsVersion");
Object.defineProperty(exports, "activateTsVersionStatusItem", { enumerable: true, get: function () { return tsVersion_1.activate; } });
Object.defineProperty(exports, "getTsdk", { enumerable: true, get: function () { return tsVersion_1.getTsdk; } });
__exportStar(require("vscode-languageclient"), exports);
exports.middleware = {
    async provideCodeActions(document, range, context, token, next) {
        let actions = await next(document, range, context, token);
        actions = actions?.map(action => {
            if (!(action instanceof vscode.CodeAction)) {
                return parseServerCommand(action);
            }
            if (action.command) {
                action.command = parseServerCommand(action.command);
            }
            return action;
        });
        return actions;
    },
    async resolveCodeAction(item, token, next) {
        const action = await next(item, token);
        if (action?.command) {
            action.command = parseServerCommand(action.command);
        }
        return action;
    },
    async provideCodeLenses(document, token, next) {
        let codeLenses = await next(document, token);
        codeLenses = codeLenses?.map(action => {
            if (action.command) {
                action.command = parseServerCommand(action.command);
            }
            return action;
        });
        return codeLenses;
    },
    async resolveCodeLens(item, token, next) {
        const codeLens = await next(item, token);
        if (codeLens?.command) {
            codeLens.command = parseServerCommand(codeLens.command);
        }
        return codeLens;
    },
};
function parseServerCommand(command) {
    if (command.command === 'editor.action.rename' && command.arguments) {
        return {
            ...command,
            arguments: [[
                    vscode.Uri.parse(command.arguments[0]),
                    new vscode.Position(command.arguments[1].line, command.arguments[1].character),
                ]],
        };
    }
    else if (command.command === 'editor.action.showReferences' && command.arguments) {
        return {
            ...command,
            arguments: [
                vscode.Uri.parse(command.arguments[0]),
                new vscode.Position(command.arguments[1].line, command.arguments[1].character),
                command.arguments[2].map((ref) => new vscode.Location(vscode.Uri.parse(ref.uri), new vscode.Range(ref.range.start.line, ref.range.start.character, ref.range.end.line, ref.range.end.character))),
            ],
        };
    }
    return command;
}
exports.currentLabsVersion = '2.3.1';
function createLabsInfo(languageServerProtocol) {
    const onDidAddLanguageClientEmitter = new vscode.EventEmitter();
    const extensionExports = {
        volarLabs: {
            version: exports.currentLabsVersion,
            languageClients: [],
            languageServerProtocol,
            onDidAddLanguageClient: onDidAddLanguageClientEmitter.event,
        },
    };
    return {
        extensionExports,
        addLanguageClient(languageClient) {
            extensionExports.volarLabs.languageClients.push(languageClient);
            onDidAddLanguageClientEmitter.fire(languageClient);
        },
    };
}
//# sourceMappingURL=index.js.map