"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.activate = activate;
const vscode = require("vscode");
const nls = require("vscode-nls");
const protocol_1 = require("@volar/language-server/protocol");
const localize = nls.loadMessageBundle();
function activate(cmd, client) {
    return vscode.commands.registerCommand(cmd, async (uri) => {
        // https://github.com/microsoft/vscode/blob/main/extensions/typescript-language-features/src/languageFeatures/fileReferences.ts
        await vscode.window.withProgress({
            location: vscode.ProgressLocation.Window,
            title: localize('progress.title', "Finding file references")
        }, async (_progress) => {
            if (!uri) {
                const editor = vscode.window.activeTextEditor;
                if (!editor) {
                    return;
                }
                uri = editor.document.uri;
            }
            const response = await client.sendRequest(protocol_1.FindFileReferenceRequest.type, { textDocument: { uri: uri.toString() } });
            if (!response) {
                return;
            }
            const locations = response.map(loc => client.protocol2CodeConverter.asLocation(loc));
            const config = vscode.workspace.getConfiguration('references');
            const existingSetting = config.inspect('preferredLocation');
            await config.update('preferredLocation', 'view');
            try {
                await vscode.commands.executeCommand('editor.action.showReferences', uri, new vscode.Position(0, 0), locations);
            }
            finally {
                await config.update('preferredLocation', existingSetting?.workspaceFolderValue ?? existingSetting?.workspaceValue);
            }
        });
    });
}
//# sourceMappingURL=fileReferences.js.map