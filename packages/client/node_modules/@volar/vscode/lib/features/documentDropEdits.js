"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.activate = activate;
const vscode = require("vscode");
const protocol_1 = require("@volar/language-server/protocol");
function activate(selector, client) {
    let lastDataTransfer;
    return vscode.Disposable.from(client.onRequest(protocol_1.DocumentDrop_DataTransferItemAsStringRequest.type, async ({ mimeType }) => {
        const item = lastDataTransfer.get(mimeType);
        return await item?.asString() ?? '';
    }), client.onRequest(protocol_1.DocumentDrop_DataTransferItemFileDataRequest.type, async ({ mimeType }) => {
        const item = lastDataTransfer.get(mimeType);
        return await item?.asFile()?.data() ?? new Uint8Array();
    }), vscode.languages.registerDocumentDropEditProvider(selector, {
        async provideDocumentDropEdits(document, position, dataTransfer) {
            lastDataTransfer = dataTransfer;
            const result = await client.sendRequest(protocol_1.DocumentDropRequest.type, {
                textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),
                position: client.code2ProtocolConverter.asPosition(position),
                dataTransfer: [...dataTransfer].map(([mimeType, item]) => {
                    const file = item.asFile();
                    return {
                        mimeType,
                        value: item.value,
                        file: file ? {
                            name: file.name,
                            uri: file.uri ? client.code2ProtocolConverter.asUri(file.uri) : undefined,
                        } : undefined,
                    };
                })
            });
            if (result) {
                const edit = new vscode.DocumentDropEdit(result.insertTextFormat === 2 /* InsertTextMode.Snippet */ ? new vscode.SnippetString(result.insertText) : result.insertText);
                if (result.additionalEdit) {
                    edit.additionalEdit = await client.protocol2CodeConverter.asWorkspaceEdit(result.additionalEdit);
                }
                if (result.createDataTransferFile) {
                    edit.additionalEdit ??= new vscode.WorkspaceEdit();
                    for (const create of result.createDataTransferFile) {
                        const file = dataTransfer.get(create.contentsMimeType)?.asFile();
                        if (file) {
                            edit.additionalEdit.createFile(client.protocol2CodeConverter.asUri(create.uri), {
                                ignoreIfExists: create.options?.ignoreIfExists,
                                overwrite: create.options?.overwrite,
                                contents: await file.data(),
                            });
                        }
                    }
                }
                return edit;
            }
        },
    }));
}
//# sourceMappingURL=documentDropEdits.js.map