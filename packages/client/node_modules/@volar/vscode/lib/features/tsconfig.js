"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.activate = activate;
const vscode = require("vscode");
const protocol_1 = require("@volar/language-server/protocol");
const path = require("path-browserify");
function activate(selector, cmd, client) {
    const subscriptions = [];
    const statusBar = vscode.languages.createLanguageStatusItem(cmd, selector);
    let currentTsconfigUri;
    let updateStatus;
    updateStatusBar();
    vscode.window.onDidChangeActiveTextEditor(() => {
        clearTimeout(updateStatus);
        updateStatus = setTimeout(() => updateStatusBar, 100);
    }, undefined, subscriptions);
    subscriptions.push(vscode.commands.registerCommand(cmd, async () => {
        if (currentTsconfigUri) {
            const document = await vscode.workspace.openTextDocument(currentTsconfigUri);
            await vscode.window.showTextDocument(document);
        }
    }));
    subscriptions.push(...subscriptions);
    async function updateStatusBar() {
        if (!vscode.window.activeTextEditor
            || !vscode.languages.match(selector, vscode.window.activeTextEditor.document)) {
            return;
        }
        const tsconfig = await client.sendRequest(protocol_1.GetMatchTsConfigRequest.type, client.code2ProtocolConverter.asTextDocumentIdentifier(vscode.window.activeTextEditor.document));
        if (tsconfig?.uri) {
            currentTsconfigUri = vscode.Uri.parse(tsconfig.uri);
            statusBar.text = path.relative((vscode.workspace.rootPath?.replace(/\\/g, '/') || '/'), currentTsconfigUri.fsPath.replace(/\\/g, '/'));
            statusBar.command = {
                title: 'Open config file',
                command: cmd,
            };
        }
        else {
            statusBar.text = 'No tsconfig';
            statusBar.command = undefined;
        }
    }
}
//# sourceMappingURL=tsconfig.js.map